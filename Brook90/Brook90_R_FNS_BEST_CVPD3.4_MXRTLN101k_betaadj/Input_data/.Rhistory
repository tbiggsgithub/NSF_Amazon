legend("bottomleft",c("Observed","cD 2.1 GLmax 0.35","cD 3.4 GLmax 0.29"),lty=c(NA,1,2),pch=c(20,NA,NA))
source("K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/met_data_check.R")
{
library(dplyr)
library(DataCombine)
library(plotrix)
}
# Run B90
# Need to run each model twice due to changing LAI parameters
#  To change models, change the model directory path in BV90.R and MainProg.R
#  and in three locations below;
{
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
#indir.model = "Brook90_R_FNS_BEST/"  # CURRENT BEST MODEL 7/16/2020
#indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_3_layer/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
#indir.model = "Brook90_R_FNS_v4_5soil_layer_updateveg_ABRLBA/"
indir.code = paste0(indir.base,indir.model,"Rfiles_tb/B90V4.R")
input.dir = paste0(indir.base,indir.model,"Input_data/")
#  ABRACOS veg
setwd(input.dir)
file.copy(from="canopy_ABR.txt",to="canopy.txt",overwrite=TRUE)
file.copy(from="location_ABR.txt",to="location.txt",overwrite=TRUE)
# RUN THE MODEL FOR ABRACOS VEG PARAMETERS (higher LAI, height)
source(indir.code)
ts.abr = timeseries_df
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
#indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_3_layer/"
outdir.output = paste0(indir.base,indir.model,"output/")
write.csv(ts.abr,paste0(outdir.output,"ts.abr.csv"),row.names=FALSE)
write.csv(ts_limits,paste0(outdir.output,"ts_limits.abr.csv"),row.names=FALSE)
# LBA veg
indir.code = paste0(indir.base,indir.model,"Rfiles_tb/B90V4.R")
input.dir = paste0(indir.base,indir.model,"Input_data/")
setwd(input.dir)
file.copy(from="canopy_LBA.txt",to="canopy.txt",overwrite=TRUE)
file.copy(from="location_LBA.txt",to="location.txt",overwrite=TRUE)
# RUN MODEL for LBA veg parameters
source(indir.code)
ts.lba = timeseries_df
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
outdir.output = paste0(indir.base,indir.model,"output/")
write.csv(ts.lba,paste0(outdir.output,"ts.lba.csv"),row.names=FALSE)
write.csv(ts_limits,paste0(outdir.output,"ts_limits.lba.csv"),row.names=FALSE)
}
{
library(dplyr)
library(DataCombine)
library(plotrix)
}
# Run B90
# Need to run each model twice due to changing LAI parameters
#  To change models, change the model directory path in BV90.R and MainProg.R
#  and in three locations below;
{
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
#indir.model = "Brook90_R_FNS_BEST/"  # CURRENT BEST MODEL 7/16/2020
#indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_3_layer/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
#indir.model = "Brook90_R_FNS_v4_5soil_layer_updateveg_ABRLBA/"
indir.code = paste0(indir.base,indir.model,"Rfiles_tb/B90V4.R")
input.dir = paste0(indir.base,indir.model,"Input_data/")
#  ABRACOS veg
setwd(input.dir)
file.copy(from="canopy_ABR.txt",to="canopy.txt",overwrite=TRUE)
file.copy(from="location_ABR.txt",to="location.txt",overwrite=TRUE)
# RUN THE MODEL FOR ABRACOS VEG PARAMETERS (higher LAI, height)
source(indir.code)
ts.abr = timeseries_df
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
#indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_3_layer/"
outdir.output = paste0(indir.base,indir.model,"output/")
write.csv(ts.abr,paste0(outdir.output,"ts.abr.csv"),row.names=FALSE)
write.csv(ts_limits,paste0(outdir.output,"ts_limits.abr.csv"),row.names=FALSE)
# LBA veg
indir.code = paste0(indir.base,indir.model,"Rfiles_tb/B90V4.R")
input.dir = paste0(indir.base,indir.model,"Input_data/")
setwd(input.dir)
file.copy(from="canopy_LBA.txt",to="canopy.txt",overwrite=TRUE)
file.copy(from="location_LBA.txt",to="location.txt",overwrite=TRUE)
# RUN MODEL for LBA veg parameters
source(indir.code)
ts.lba = timeseries_df
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
outdir.output = paste0(indir.base,indir.model,"output/")
write.csv(ts.lba,paste0(outdir.output,"ts.lba.csv"),row.names=FALSE)
write.csv(ts_limits,paste0(outdir.output,"ts_limits.lba.csv"),row.names=FALSE)
}
PM
Pm
AA
VPD
DELTA
RA
RA
RC
PM
install.packages("FAO56")
library(FAO56)
ma <- function(arr, n=20){  # Moving average centered on a given point
res = arr
for(i in n:length(arr)){
res[i] = mean(arr[(i-n+1):i])
}
res[1:n] = NA
res
}
add.rects <- function(start,stop){
for (j in start:stop){
rect(xleft=dry.starts[j],ybottom=y.range[1],xright=dry.ends[j],ytop=y.range[2],col=col.rect,border=FALSE)
}
}
{
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
indir.output = paste0(indir.base,indir.model,"/output/")
force.data = read.csv(paste0(indir.output,"force.data.csv"))  # Data read in by B90
force.data[force.data$flag==99,c("Rn","Tmax","Tmin","ea","u","P")] = NA  # 99 indicates missing data in January 1999 that was copied from 2001
force.data$Modeldate = as.Date(force.data$Modeldate)
force.data$TRUDATE = as.Date(force.data$Date)
force.data$Tmean = (force.data$Tmax+force.data$Tmin)/2
}
# Recalculate SVP using R functions from the humidity package.
# Pull out the SVP equation from B90: (in PET.R)
ESAT<-function(TA){
Es <- 0.61078 * exp(17.26939 * TA / (TA + 237.3))
DELTa <- 4098 * Es / (TA + 237.3) ^ 2
if (TA < 0) {
Es <- 0.61078 * exp(21.87456 * TA / (TA + 265.5))
DELTa <- 5808 * Es / (TA + 265.5) ^ 2
}
return(c(Es, DELTa))
}
# Recalculate VPD using equations in B90, but not the B90 output.
{
tvec = force.data$Tmean
tminvec = force.data$Tmin
tmaxvec = force.data$Tmax
svp.out=rep(NA,times=length(tvec))
svp.min = svp.max = svp.out
svp.out.b90.recalc = svp.min.b90.recalc = svp.max.b90.recalc = svp.out
# For some reason, SVP function doesn't work on vectors, so need to loop
for (foo in 1:length(tvec)){
svp.out[foo] = SVP(t=tvec[foo],isK=FALSE)/10
svp.min[foo] = SVP(t=tminvec[foo],isK=FALSE)/10
svp.max[foo] = SVP(t=tmaxvec[foo],isK=FALSE)/10
svp.out.b90.recalc[foo] = SVP(t=tvec[foo],isK=FALSE)/10
svp.min.b90.recalc[foo] = SVP(t=tminvec[foo],isK=FALSE)/10
svp.max.b90.recalc[foo] = SVP(t=tmaxvec[foo],isK=FALSE)/10
}
svp.mean = (svp.min+svp.max)/2  # This is the best one to use.
svp.mean.b90.recalc = (svp.min.b90.recalc + svp.max.b90.recalc)/2
vpd.b90.recalc = svp.mean.b90.recalc-force.data$ea
force.data$vpd.b90.recalc = vpd.b90.recalc
}
# read in vpd, ES, EA from B90 calculations from B90v4.R script (ES=SVP)
# Note: these values are different than what I get when recalculating ES from
# the equations in B90.  I think it's an assignment problem from my code, but
# the B90 equations are correct.  So, use the ES and VPD calculated fresh from the B90 equation.
{
ts.vpd = read.csv(paste0(indir.output,"ts_vpd.csv"))
ts.vpd[force.data$flag==99,c("VPD","ES","EA")] = NA
ts.vpd$vpd.pos = ts.vpd$VPD
ts.vpd$vpd.pos[ts.vpd$VPD<0] = 0
}
# Read in PET data
{
ts.pet.abr = read.csv(paste0(indir.output,"ts.abr.csv"))
ts.pet.lba = read.csv(paste0(indir.output,"ts.lba.csv"))
ts.pet.comb = ts.pet.abr
ts.pet.comb$MODELDATE = as.Date(ts.pet.comb$MODELDATE)
ts.pet.comb$TRUDATE = as.Date(ts.pet.comb$TRUDATE)
ts.pet.comb[ts.pet.comb$TRUDATE > as.Date("1995-12-31"),] = ts.pet.lba[ts.pet.comb$TRUDATE > as.Date("1995-12-31"),]
ts.pet.comb[force.data$flag==99,c("PET","PTRAN","TRANS","ET","soilmoist.02m","FLOW")] = NA
}
PETPM = ETo_FPM(R_n=force.data$Rn,u_z=force.data$u,z=3.5,e_a=force.data$ea,T_min=force.data$Tmin,T_max=force.data$Tmax,elev=100)
PETPM
force.data$Rn/((1000000/86400))
force.data$Rn*0.0864
294*0.0864
force.data$Rn
PETPM
# Compare PET.PM with PET.B90
plot(PETPM,ts.pet.comb$PET,xlab="PET, Penman Monteith","PET B90 (PINT+PTRAN+SLVP")
# Plot SVP (es) from both the SVP function, and from B90 output:
plot(ts.vpd$ES,svp.out,xlab="B90 es, kPa",ylab="R.calc SVP, kPa)")
abline(0,1,col="red")
# Compare PET.PM with PET.B90
plot(PETPM,ts.pet.comb$PET,xlab="PET, Penman Monteith",ylab="PET B90 (PINT+PTRAN+SLVP")
abline(0,1,col="red")
ts.pet.comb$PET.PTRAN.SLVP = ts.pet.comb$PTRAN + ts.pet.comb$soilevap
plot(PETPM,ts.pet.comb$PET.PTRAN.SLVP,xlab="PET, Penman Monteith",ylab="PET B90 (PINT+PTRAN+SLVP")
abline(0,1,col="red")
# Multipanel plot commands:
{
nf <- layout(
matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol=2, byrow=TRUE),
widths=c(5*ndays.ratio,5),
heights=rep(1,times=12)
)
par(mar=c(1,1.2,0,0),oma=c(3,4,1,1))
roll.col = "red"
# Precip
y.range = range(force.data$P,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$P[index.abr],type="l",ylim=y.range,las=1,xaxt="n",col="blue")
axis(side=1,at=ats,labels=FALSE)
mtext(side=2,"Precip mm",line=2.5)
add.rects(1,3)
plot(force.data$TRUDATE[index.lba],force.data$P[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n",col="blue")
axis(side=1,at=ats,labels=FALSE)
add.rects(4,7)
# Rn
y.range = range(force.data$Rn,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$Rn[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$Rn[index.abr],col=roll.col)
add.rects(1,3)  # start and stop of the year indices
mtext(side=2,Rnet.text.gen,line=2.5)
plot(force.data$TRUDATE[index.lba],force.data$Rn[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$Rn[index.lba],col=roll.col)
add.rects(4,7)  # start and stop of the year indices
# Tmean
y.range = range(force.data$Tmean,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$Tmean[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$Tmean[index.abr],col=roll.col)
add.rects(1,3)
mtext(side=2,"Tmean C",line=2.5)
plot(force.data$TRUDATE[index.lba],force.data$Tmean[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$Tmean[index.lba],col=roll.col)
add.rects(4,7)
#ea
y.range = range(force.data$ea,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$ea[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
#lines(force.data$TRUDATE[index.abr],ts_vpd$EA[index.abr],col=roll.col)  # EA in ts_vpd matches, so good.
mtext(side=2,"ea, kPa",line=2.5)
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$ea[index.abr],col=roll.col)
add.rects(1,3)
plot(force.data$TRUDATE[index.lba],force.data$ea[index.lba],type="l",ylim=y.range,yaxt="n")
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$ea[index.lba],col=roll.col)
#lines(force.data$TRUDATE[index.lba],ts_vpd$EA[index.lba],col=roll.col)  # EA in ts_vpd matches, so good.
add.rects(4,7)
# vpd
y.range = range(vpd.b90.recalc,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],type="l",ylim=y.range,las=1)
#lines(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$vpd.b90.recalc[index.abr],col=roll.col)
abline(h=0,lty=2)
add.rects(1,3)
mtext(side=2,"VPD, kPa",line=2.5)
plot(force.data$TRUDATE[index.lba],vpd.b90.recalc[index.lba],type="l",ylim=y.range,yaxt="n")
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$vpd.b90.recalc[index.lba],col=roll.col)
#lines(force.data$TRUDATE[index.lba],vpd.b90.recalc[index.lba],col=roll.col)
abline(h=0,lty=2)
add.rects(4,7)
# PET: PTRAN+SVLP, PET.PM
y.range = c(0,max(ts.pet.comb$PET,na.rm=TRUE))
plot(ts.pet.comb$TRUDATE[index.abr],ts.pet.comb$PET[index.abr],type="l",ylim=y.range,las=1)
#lines(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],pet.data.rollmean.df$PET[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],ts.pet.comb$PTRAN[index.abr],col="orange")
lines(force.data$TRUDATE[index.abr],pet.data.rollmean.df$PTRAN[index.abr],col="darkorange")
add.rects(1,3)
mtext(side=2,"PET, mm d-1",line=2.5)
plot(ts.pet.comb$TRUDATE[index.lba],ts.pet.comb$PET[index.lba],type="l",ylim=y.range,yaxt="n")
#lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$vpd.b90.recalc[index.lba],col=roll.col)
lines(force.data$TRUDATE[index.lba],pet.data.rollmean.df$PET[index.lba],col=roll.col)
lines(force.data$TRUDATE[index.lba],PETPM[index.lba],col="blue")
lines(force.data$TRUDATE[index.lba],ts.pet.comb$PTRAN[index.lba],col="orange")
lines(force.data$TRUDATE[index.lba],pet.data.rollmean.df$PTRAN[index.lba],col="darkorange")
add.rects(4,7)
}
ma <- function(arr, n=20){  # Moving average centered on a given point
res = arr
for(i in n:length(arr)){
res[i] = mean(arr[(i-n+1):i])
}
res[1:n] = NA
res
}
add.rects <- function(start,stop){
for (j in start:stop){
rect(xleft=dry.starts[j],ybottom=y.range[1],xright=dry.ends[j],ytop=y.range[2],col=col.rect,border=FALSE)
}
}
# Check and plot met data, especially vpd
library(plotrix)
library(humidity)
library(FAO56)
ma <- function(arr, n=20){  # Moving average centered on a given point
res = arr
for(i in n:length(arr)){
res[i] = mean(arr[(i-n+1):i])
}
res[1:n] = NA
res
}
add.rects <- function(start,stop){
for (j in start:stop){
rect(xleft=dry.starts[j],ybottom=y.range[1],xright=dry.ends[j],ytop=y.range[2],col=col.rect,border=FALSE)
}
}
{
indir.base = "K:/My Drive/Gdrive/mydocuments/amazon/writeups/2019_NSF_B90/2023_09_boston_USE_THIS_ONE/2019_NSF_SSiB_1D/Rfiles/Brook90/"
indir.model = "Brook90_R_FNS_BEST_sensitivity/Brook90_R_FNS_BEST_CVPD3.4_MXRTLN101k_betaadj/"
indir.output = paste0(indir.base,indir.model,"/output/")
force.data = read.csv(paste0(indir.output,"force.data.csv"))  # Data read in by B90
force.data[force.data$flag==99,c("Rn","Tmax","Tmin","ea","u","P")] = NA  # 99 indicates missing data in January 1999 that was copied from 2001
force.data$Modeldate = as.Date(force.data$Modeldate)
force.data$TRUDATE = as.Date(force.data$Date)
force.data$Tmean = (force.data$Tmax+force.data$Tmin)/2
}
# Recalculate SVP using R functions from the humidity package.
# Pull out the SVP equation from B90: (in PET.R)
ESAT<-function(TA){
Es <- 0.61078 * exp(17.26939 * TA / (TA + 237.3))
DELTa <- 4098 * Es / (TA + 237.3) ^ 2
if (TA < 0) {
Es <- 0.61078 * exp(21.87456 * TA / (TA + 265.5))
DELTa <- 5808 * Es / (TA + 265.5) ^ 2
}
return(c(Es, DELTa))
}
# Recalculate VPD using equations in B90, but not the B90 output.
{
tvec = force.data$Tmean
tminvec = force.data$Tmin
tmaxvec = force.data$Tmax
svp.out=rep(NA,times=length(tvec))
svp.min = svp.max = svp.out
svp.out.b90.recalc = svp.min.b90.recalc = svp.max.b90.recalc = svp.out
# For some reason, SVP function doesn't work on vectors, so need to loop
for (foo in 1:length(tvec)){
svp.out[foo] = SVP(t=tvec[foo],isK=FALSE)/10
svp.min[foo] = SVP(t=tminvec[foo],isK=FALSE)/10
svp.max[foo] = SVP(t=tmaxvec[foo],isK=FALSE)/10
svp.out.b90.recalc[foo] = SVP(t=tvec[foo],isK=FALSE)/10
svp.min.b90.recalc[foo] = SVP(t=tminvec[foo],isK=FALSE)/10
svp.max.b90.recalc[foo] = SVP(t=tmaxvec[foo],isK=FALSE)/10
}
svp.mean = (svp.min+svp.max)/2  # This is the best one to use.
svp.mean.b90.recalc = (svp.min.b90.recalc + svp.max.b90.recalc)/2
vpd.b90.recalc = svp.mean.b90.recalc-force.data$ea
force.data$vpd.b90.recalc = vpd.b90.recalc
}
# read in vpd, ES, EA from B90 calculations from B90v4.R script (ES=SVP)
# Note: these values are different than what I get when recalculating ES from
# the equations in B90.  I think it's an assignment problem from my code, but
# the B90 equations are correct.  So, use the ES and VPD calculated fresh from the B90 equation.
{
ts.vpd = read.csv(paste0(indir.output,"ts_vpd.csv"))
ts.vpd[force.data$flag==99,c("VPD","ES","EA")] = NA
ts.vpd$vpd.pos = ts.vpd$VPD
ts.vpd$vpd.pos[ts.vpd$VPD<0] = 0
}
# Read in PET data
{
ts.pet.abr = read.csv(paste0(indir.output,"ts.abr.csv"))
ts.pet.lba = read.csv(paste0(indir.output,"ts.lba.csv"))
ts.pet.comb = ts.pet.abr
ts.pet.comb$MODELDATE = as.Date(ts.pet.comb$MODELDATE)
ts.pet.comb$TRUDATE = as.Date(ts.pet.comb$TRUDATE)
ts.pet.comb[ts.pet.comb$TRUDATE > as.Date("1995-12-31"),] = ts.pet.lba[ts.pet.comb$TRUDATE > as.Date("1995-12-31"),]
ts.pet.comb[force.data$flag==99,c("PET","PTRAN","TRANS","ET","soilmoist.02m","FLOW")] = NA
}
# Calculate PET from Penman Monteith equation, compare with B90
elev = 100
T_min = force.data$Tmin
T_max = force.data$Tmax
# Rn unit conversion from https://stackoverflow.com/questions/40826466/solar-energy-conversion-w-m2-to-mj-m2
PETPM = ETo_FPM(R_n=force.data$Rn,u_z=force.data$u,z=3.5,e_a=force.data$ea,T_min=force.data$Tmin,T_max=force.data$Tmax,elev=100)
ts.pet.comb$PET.PTRAN.SLVP = ts.pet.comb$PTRAN + ts.pet.comb$soilevap
plot.check = 0
if (plot.check==1){
# Plot SVP (es) from both the SVP function, and from B90 output:
plot(ts.vpd$ES,svp.out,xlab="B90 es, kPa",ylab="R.calc SVP, kPa)")
points(ts.vpd$ES,svp.mean,col="blue",pch=20)
abline(0,1,col="red")
# B90 stand-alone function gives exact same ES as the function in R...
# But B90 stand-alone is different from B90 from the ts.vpd file.  Must be a problem with how ES is being assigned in the B90v4.R routine
plot(svp.out.b90.recalc,svp.out,xlab="B90 recalc es",ylab="R.calc es")
abline(0,1,col="red")
# Check to see if ea is the same from ts_vpd and forcing data:
# The are the same...
plot(ts.vpd$EA,force.data$ea,xlab="ea, ts_vpd from b90",ylab="ea, forcing data")
abline(0,1,col="red")
# Check vdp from recalculated time series
vpd.b90.recalc = svp.out.b90.recalc - force.data$ea
plot(force.data$Modeldate,vpd.b90.recalc,type="l")
# Compare vpd recalc with vpd from B90:
plot(vpd.b90.recalc,ts.vpd$VPD,xlab="VPD recalc",ylab="VPD B90 tseries")
abline(0,1,col="red")
len.vpd.lt0.recalc = length(which(vpd.b90.recalc<0))/length(vpd.b90.recalc)  # about 2% are <0
len.vpd.lt0.b90output = length(which(ts.vpd$VPD<0))/length(ts.vpd$VPD)  # about 9% are <0
# vpd and svp from the b90 series are different than recalcualted with the B90 functions...
# So the problem must be with the assignment of ES and VPD in the B90 routine.
# Compare PET.PM with PET.B90
plot(PETPM,ts.pet.comb$PET,xlab="PET, Penman Monteith",ylab="PET B90 (PINT+PTRAN+SLVP")
abline(0,1,col="red")
plot(PETPM,ts.pet.comb$PET.PTRAN.SLVP,xlab="PET, Penman Monteith",ylab="PET B90 (PINT+PTRAN+SLVP")
abline(0,1,col="red")
}
{
index.lba = which(force.data$TRUDATE>as.Date("1995-01-01"))
index.abr = which(force.data$TRUDATE<as.Date("1995-01-01"))
ndays.abr = length(index.abr)
ndays.lba = length(index.lba)
ndays.ratio = ndays.abr/ndays.lba  # For sizing the panels in the plot.
}
# Multipanel plot with Rn, Tmean, ea, vpd
{
yrs = c(1992,1993,1994,1999,2000,2001,2002,2003)
ats= as.Date(paste0(yrs,"-01-01"))
dry.starts = as.Date(paste0(yrs,"-06-01"))
dry.ends = as.Date(paste0(yrs,"-08-31"))
Rnet.text.gen = expression('R'['n']* ', W m'^"-2")
}
col.rect = rgb(0.5,0.5,0.5,alpha=0.25)  # dry season rectangle color
force.data.rollmean.df = data.frame(Rn=ma(force.data$Rn),Tmean=ma(force.data$Tmean),ea=ma(force.data$ea),vpd.b90.recalc=ma(force.data$vpd.b90.recalc))
pet.data.rollmean.df = data.frame(PET=ma(ts.pet.comb$PET),PTRAN=ma(ts.pet.comb$PTRAN),SLVP = ma(ts.pet.comb$soilevap), soilm.02m=ma(ts.pet.comb$soilmoist.02m))
# Multipanel plot commands:
{
nf <- layout(
matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), ncol=2, byrow=TRUE),
widths=c(5*ndays.ratio,5),
heights=rep(1,times=12)
)
par(mar=c(1,1.2,0,0),oma=c(3,4,1,1))
roll.col = "red"
# Precip
y.range = range(force.data$P,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$P[index.abr],type="l",ylim=y.range,las=1,xaxt="n",col="blue")
axis(side=1,at=ats,labels=FALSE)
mtext(side=2,"Precip mm",line=2.5)
add.rects(1,3)
plot(force.data$TRUDATE[index.lba],force.data$P[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n",col="blue")
axis(side=1,at=ats,labels=FALSE)
add.rects(4,7)
# Rn
y.range = range(force.data$Rn,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$Rn[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$Rn[index.abr],col=roll.col)
add.rects(1,3)  # start and stop of the year indices
mtext(side=2,Rnet.text.gen,line=2.5)
plot(force.data$TRUDATE[index.lba],force.data$Rn[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$Rn[index.lba],col=roll.col)
add.rects(4,7)  # start and stop of the year indices
# Tmean
y.range = range(force.data$Tmean,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$Tmean[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$Tmean[index.abr],col=roll.col)
add.rects(1,3)
mtext(side=2,"Tmean C",line=2.5)
plot(force.data$TRUDATE[index.lba],force.data$Tmean[index.lba],type="l",ylim=y.range,yaxt="n",xaxt="n")
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$Tmean[index.lba],col=roll.col)
add.rects(4,7)
#ea
y.range = range(force.data$ea,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],force.data$ea[index.abr],type="l",ylim=y.range,las=1,xaxt="n")
#lines(force.data$TRUDATE[index.abr],ts_vpd$EA[index.abr],col=roll.col)  # EA in ts_vpd matches, so good.
mtext(side=2,"ea, kPa",line=2.5)
axis(side=1,at=ats,labels=FALSE)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$ea[index.abr],col=roll.col)
add.rects(1,3)
plot(force.data$TRUDATE[index.lba],force.data$ea[index.lba],type="l",ylim=y.range,yaxt="n")
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$ea[index.lba],col=roll.col)
#lines(force.data$TRUDATE[index.lba],ts_vpd$EA[index.lba],col=roll.col)  # EA in ts_vpd matches, so good.
add.rects(4,7)
# vpd
y.range = range(vpd.b90.recalc,na.rm=TRUE)
plot(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],type="l",ylim=y.range,las=1)
#lines(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],force.data.rollmean.df$vpd.b90.recalc[index.abr],col=roll.col)
abline(h=0,lty=2)
add.rects(1,3)
mtext(side=2,"VPD, kPa",line=2.5)
plot(force.data$TRUDATE[index.lba],vpd.b90.recalc[index.lba],type="l",ylim=y.range,yaxt="n")
lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$vpd.b90.recalc[index.lba],col=roll.col)
#lines(force.data$TRUDATE[index.lba],vpd.b90.recalc[index.lba],col=roll.col)
abline(h=0,lty=2)
add.rects(4,7)
# PET: PTRAN+SVLP, PET.PM
y.range = c(0,max(ts.pet.comb$PET,na.rm=TRUE))
plot(ts.pet.comb$TRUDATE[index.abr],ts.pet.comb$PET[index.abr],type="l",ylim=y.range,las=1)
#lines(force.data$TRUDATE[index.abr],vpd.b90.recalc[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],pet.data.rollmean.df$PET[index.abr],col=roll.col)
lines(force.data$TRUDATE[index.abr],ts.pet.comb$PTRAN[index.abr],col="orange")
lines(force.data$TRUDATE[index.abr],pet.data.rollmean.df$PTRAN[index.abr],col="darkorange")
add.rects(1,3)
mtext(side=2,"PET, mm d-1",line=2.5)
plot(ts.pet.comb$TRUDATE[index.lba],ts.pet.comb$PET[index.lba],type="l",ylim=y.range,yaxt="n")
#lines(force.data$TRUDATE[index.lba],force.data.rollmean.df$vpd.b90.recalc[index.lba],col=roll.col)
lines(force.data$TRUDATE[index.lba],pet.data.rollmean.df$PET[index.lba],col=roll.col)
lines(force.data$TRUDATE[index.lba],PETPM[index.lba],col="blue")
lines(force.data$TRUDATE[index.lba],ts.pet.comb$PTRAN[index.lba],col="orange")
lines(force.data$TRUDATE[index.lba],pet.data.rollmean.df$PTRAN[index.lba],col="darkorange")
add.rects(4,7)
}
ETo_FPM()
ETo_FPM
100/(0.5*24*0.5)
